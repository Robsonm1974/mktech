/**
 * Script para organizar os assets baixados na estrutura correta
 * 
 * Uso: node scripts/organize-assets.js
 */

const fs = require('fs');
const path = require('path');

console.log('üé® ORGANIZANDO ASSETS DA F√ÅBRICA DE JOGOS\n');
console.log('='.repeat(60));

// Fun√ß√£o para copiar diret√≥rio recursivamente
function copyDirectory(source, destination) {
  if (!fs.existsSync(source)) {
    console.log(`‚ö†Ô∏è  Fonte n√£o encontrada: ${source}`);
    return false;
  }

  if (!fs.existsSync(destination)) {
    fs.mkdirSync(destination, { recursive: true });
  }

  const files = fs.readdirSync(source);
  let count = 0;

  files.forEach(file => {
    const sourcePath = path.join(source, file);
    const destPath = path.join(destination, file);

    if (fs.statSync(sourcePath).isDirectory()) {
      copyDirectory(sourcePath, destPath);
    } else {
      fs.copyFileSync(sourcePath, destPath);
      count++;
    }
  });

  return count;
}

// Organizar Pixel Adventure
console.log('\nüì¶ Organizando Pixel Adventure (Personagens)...');
const pixelSource = 'public/games/Pixel Adventure';
const pixelDest = 'public/games/assets/characters/pixel-adventure';

if (fs.existsSync(pixelSource)) {
  const pixelCount = copyDirectory(pixelSource, pixelDest);
  console.log(`   ‚úÖ ${pixelCount} arquivos copiados para assets/characters/`);
} else {
  console.log('   ‚ö†Ô∏è  Pixel Adventure n√£o encontrado em public/games/');
}

// Organizar Treasure Hunters
console.log('\nüíé Organizando Treasure Hunters (Itens)...');
const treasureSource = 'public/games/Treasure Hunters';
const treasureDest = 'public/games/assets/items/treasure-hunters';

if (fs.existsSync(treasureSource)) {
  const treasureCount = copyDirectory(treasureSource, treasureDest);
  console.log(`   ‚úÖ ${treasureCount} arquivos copiados para assets/items/`);
} else {
  console.log('   ‚ö†Ô∏è  Treasure Hunters n√£o encontrado em public/games/');
}

// Verificar m√∫sica
console.log('\nüéµ Verificando m√∫sica...');
const musicPath = 'public/games/assets/music/Fluffing a Duck.mp3';
if (fs.existsSync(musicPath)) {
  const stats = fs.statSync(musicPath);
  console.log(`   ‚úÖ M√∫sica encontrada (${(stats.size / 1024 / 1024).toFixed(2)}MB)`);
} else {
  console.log('   ‚ö†Ô∏è  M√∫sica n√£o encontrada');
}

// Criar arquivo de invent√°rio
console.log('\nüìã Criando invent√°rio de assets...');
const inventory = {
  characters: [],
  items: [],
  backgrounds: [],
  music: [],
  sounds: [],
  ui: []
};

// Escanear personagens
if (fs.existsSync(pixelDest)) {
  const scan = (dir, base = '') => {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const fullPath = path.join(dir, file);
      const relativePath = path.join(base, file);
      if (fs.statSync(fullPath).isDirectory()) {
        scan(fullPath, relativePath);
      } else if (file.endsWith('.png')) {
        inventory.characters.push(relativePath);
      }
    });
  };
  scan(pixelDest);
}

// Escanear itens
if (fs.existsSync(treasureDest)) {
  const scan = (dir, base = '') => {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const fullPath = path.join(dir, file);
      const relativePath = path.join(base, file);
      if (fs.statSync(fullPath).isDirectory()) {
        scan(fullPath, relativePath);
      } else if (file.endsWith('.png')) {
        inventory.items.push(relativePath);
      }
    });
  };
  scan(treasureDest);
}

// M√∫sica
if (fs.existsSync(musicPath)) {
  inventory.music.push('Fluffing a Duck.mp3');
}

// Salvar invent√°rio
const inventoryPath = 'public/games/assets/inventory.json';
fs.writeFileSync(inventoryPath, JSON.stringify(inventory, null, 2));
console.log(`   ‚úÖ Invent√°rio salvo em: ${inventoryPath}`);

// Resumo
console.log('\n' + '='.repeat(60));
console.log('\nüìä RESUMO:\n');
console.log(`‚úÖ Personagens: ${inventory.characters.length} arquivos`);
console.log(`‚úÖ Itens: ${inventory.items.length} arquivos`);
console.log(`‚úÖ M√∫sica: ${inventory.music.length} arquivo(s)`);
console.log(`‚ö†Ô∏è  Backgrounds: 0 (n√£o baixado)`);
console.log(`‚ö†Ô∏è  Sons: Pendente (Kenney pack)`);
console.log(`‚ö†Ô∏è  UI: Pendente (Kenney pack)`);

console.log('\nüí° PR√ìXIMOS PASSOS:');
console.log('1. ‚úÖ Assets organizados com sucesso!');
console.log('2. üéØ Pr√≥ximo: FASE 4 - Setup Phaser.js Game Engine');
console.log('3. Execute: node scripts/setup-phaser.js\n');

